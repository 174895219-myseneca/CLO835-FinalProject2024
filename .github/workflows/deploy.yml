name: Deploy to ECR

on:
  push:
    branches: [dev]  # Triggers the workflow on pushes to the dev branch

jobs:
  build-and-deploy:
    name: Build and Deploy to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1  # Define the AWS region

      - name: Build MySQL image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: finalproject-mysql
          IMAGE_TAG_DB: mysql-${{ github.run_number }}
        run: |
          echo "Building MySQL Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB -f ./docker/Dockerfile_mysql ./docker

      - name: Unit test MySQL image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: finalproject-mysql
          IMAGE_TAG_DB: mysql-${{ github.run_number }}
        run: |
          echo "Running MySQL container for unit testing..."
          docker run -d --name mysql_test -e MYSQL_ROOT_PASSWORD=pw $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB
          sleep 10
          docker exec mysql_test mysql -ppw -e "SHOW DATABASES;"
          docker stop mysql_test
          docker rm mysql_test

      - name: Push MySQL image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: finalproject-mysql
          IMAGE_TAG_DB: mysql-${{ github.run_number }}
        run: |
          echo "Pushing MySQL Image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB

      - name: Build Flask app image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
        run: |
          echo "Building Flask WebAPP Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP -f ./docker/Dockerfile ./docker \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
            --build-arg S3_BUCKET_URL=${{ secrets.S3_BUCKET_URL }}

      - name: Unit test Flask app image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
        run: |
          echo "Running Flask WebAPP container for unit testing..."
          docker run -d --name webapp_test -p 8080:81 $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP
          sleep 10
          if curl -s http://localhost:8080/; then
            echo "Flask WebAPP unit tests completed successfully."
          else
            echo "Flask WebAPP unit tests failed."
            exit 1
          fi
          docker stop webapp_test
          docker rm webapp_test

      - name: Push Flask app image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
        run: |
          echo "Pushing Flask WebAPP Image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP

      - name: Verify Deployment
        run: |
          echo "Verifying that images are pushed to ECR..."
          aws ecr describe-images --repository-name $ECR_REPOSITORY_DB --image-ids imageTag=$IMAGE_TAG_DB
          aws ecr describe-images --repository-name $ECR_REPOSITORY_APP --image-ids imageTag=$IMAGE_TAG_APP
          echo "Deployment verified successfully."
