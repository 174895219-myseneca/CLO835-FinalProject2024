name: Deploy to ECR

on:
  push:
    branches: [dev]  # Triggers the workflow on pushes to the dev branch

jobs:
  build-and-deploy:
    name: Build and Deploy to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1  # Define the AWS region

      - name: Build MySQL image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: finalproject-mysql
          IMAGE_TAG_DB: mysql-${{ github.run_number }}
        run: |
          echo "Building MySQL Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB -f ./docker/Dockerfile_mysql ./docker

      - name: Launch MySQL container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: finalproject-mysql
          IMAGE_TAG_DB: mysql-${{ github.run_number }}
        run: |
          echo "Launching MySQL container..."
          docker run -d --name mysql_container $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB
          echo "MYSQL_HOST=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql_container)" >> $GITHUB_ENV
          sleep 30  # Wait for MySQL to fully initialize

      - name: Build Flask app image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
          DBHOST: ${{ env.MYSQL_HOST }}
          DBPORT: '3306'
          DBUSER: 'root'
          DBPWD: 'pw'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          S3_BUCKET_URL: ${{ secrets.S3_BUCKET_URL }}
          BACKGROUND_IMAGE: 'https://finalproject-group11.s3.amazonaws.com/carved_faces.jpg'
        run: |
          echo "Building Flask WebAPP Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP ./docker \
            --file ./docker/Dockerfile \
            --build-arg DBHOST=$DBHOST \
            --build-arg DBPORT=$DBPORT \
            --build-arg DBUSER=$DBUSER \
            --build-arg DBPWD=$DBPWD \
            --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            --build-arg AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
            --build-arg S3_BUCKET_URL=$S3_BUCKET_URL \
            --build-arg BACKGROUND_IMAGE=$BACKGROUND_IMAGE

      - name: Run and test Flask app container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
        run: |
          echo "Running Flask WebAPP container for unit testing..."
          CONTAINER_ID=$(docker run -dp 8080:81 --name flask_app $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP)
          sleep 10
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$RESPONSE" = "200" ]; then
            echo "Flask WebAPP unit tests completed successfully."
          else
            echo "Flask WebAPP unit tests failed with status code: $RESPONSE"
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
            exit 1
          fi

      - name: Push Flask app image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: finalproject-webapp
          IMAGE_TAG_APP: webapp-${{ github.run_number }}
        run: |
          echo "Pushing Flask WebAPP Image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP

      - name: Verify Deployment
        run: |
          echo "Verifying that images are pushed to ECR..."
          aws ecr describe-images --repository-name $ECR_REPOSITORY_DB --image-ids imageTag=$IMAGE_TAG_DB
          aws ecr describe-images --repository-name $ECR_REPOSITORY_APP --image-ids imageTag=$IMAGE_TAG_APP
          echo "Deployment verified successfully."