name: Deploy to ECR

on:
  push:
    branches: [dev]  # This will trigger the workflow on pushes to the dev branch

jobs:
  build-and-deploy:
    name: Build and Deploy to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1  # Define the AWS region

      - name: Build, test, and push MySQL image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: finalproject-mysql  # ECR repository for MySQL
          IMAGE_TAG: mysql-${{ github.run_number }}  # Dynamic tagging using GitHub run number
        run: |
          echo "Building MySQL Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
          echo "Running MySQL container for testing..."
          docker run -d --name mysql_test $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          sleep 10  # Wait for MySQL to initialize
          if docker exec mysql_test mysqladmin -ppw ping; then
            echo "MySQL is up and running!"
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "MySQL image pushed successfully."
          else
            echo "MySQL test failed."
          fi
          docker rm -f mysql_test

      - name: Build, test, and push Flask app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: finalproject-webapp  # ECR repository for Flask app
          IMAGE_TAG: webapp-${{ github.run_number }}  # Dynamic tagging using GitHub run number
        run: |
          echo "Building Flask WebAPP Image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          echo "Running Flask app container for testing..."
          docker run -d --name app_test -p 8080:81 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          sleep 10  # Wait for the app to initialize
          if curl -s http://localhost:8080/ | grep -q 'Expected content'; then
            echo "Flask app is up and running!"
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "Flask app image pushed successfully."
          else
            echo "Flask app test failed."
          fi
          docker rm -f app_test

      - name: Verify Deployment
        run: |
          echo "Verifying that images are pushed to ECR..."
          aws ecr describe-images --repository-name finalproject-mysql --image-ids imageTag=mysql-${{ github.run_number }}
          aws ecr describe-images --repository-name finalproject-webapp --image-ids imageTag=webapp-${{ github.run_number }}
          echo "Deployment verified successfully."
